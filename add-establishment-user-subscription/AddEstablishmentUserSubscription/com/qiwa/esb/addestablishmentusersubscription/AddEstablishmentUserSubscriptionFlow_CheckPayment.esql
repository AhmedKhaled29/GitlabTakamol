BROKER SCHEMA com.qiwa.esb.addestablishmentusersubscription
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE AddEstablishmentUserSubscriptionFlow_CheckPayment
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();    
		-- CALL CopyEntireMessage(); 
		--DECLARE Environment.Variables REFERENCE TO Environment.Variables;
		
		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2;
		
		DECLARE i,j INTEGER 1; 
		DECLARE Result INT;
		DECLARE UserSubScriptions CHAR;
		DECLARE rInBodyRef REFERENCE TO Environment.Variables.Body;
		CREATE FIELD Environment.Variables.SPXML; 
		CREATE FIRSTCHILD OF Environment.Variables.SPXML DOMAIN 'XMLNSC';
		FOR SOURCE AS Environment.Variabl.GetInfo.UnifiedNumbersList.UnifiedNumbers[] DO  
	
				SET Environment.Variables.SPXML.XMLNSC.UsersSubscriptionList.UserSubscription[i].IdNo	=	Environment.Variables.Body.SubscriptionsList.SubscriptionItem[i].IdNo;
				SET Environment.Variables.SPXML.XMLNSC.UsersSubscriptionList.UserSubscription[i].UnifiedNumber	=	Environment.Variabl.GetInfo.UnifiedNumbersList.UnifiedNumbers[i].UnifiedNumberId ; 
				SET i	=	i	+ 1; 
				  
		END FOR; 
		
			SET UserSubScriptions = CAST(ASBITSTREAM(Environment.Variables.SPXML.XMLNSC CCSID 1208) AS CHARACTER CCSID 1208);
			CALL Check_UserNeedPayment (UserSubScriptions) INTO Result;
		
			
				IF rInBodyRef.PaymentReference IS NULL AND Result = '1' THEN      
					SET Environment.Variables.PAY = 1;
					PROPAGATE TO TERMINAL 'out';
				RETURN FALSE;
				ELSEIF rInBodyRef.PaymentReference IS NOT NULL AND Result = '1' THEN  
				    SET Environment.Variables.PAY = 0;
					PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
				ELSEIF Result = '0' THEN 
					SET Environment.Variables.PAY = 0;	
					PROPAGATE TO TERMINAL 'out2'; 
				RETURN FALSE;
			END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
CREATE PROCEDURE Check_UserNeedPayment (IN UserSubScriptions CHARACTER) RETURNS INTEGER
LANGUAGE DATABASE EXTERNAL NAME "dbo.Check_UserNeedPayment";
END MODULE;
