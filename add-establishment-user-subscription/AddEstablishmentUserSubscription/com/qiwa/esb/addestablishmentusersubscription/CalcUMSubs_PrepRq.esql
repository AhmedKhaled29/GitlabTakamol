BROKER SCHEMA com.qiwa.esb.addestablishmentusersubscription


CREATE COMPUTE MODULE CalcUMSubs_PrepRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE propertiesRef REFERENCE TO Environment.Properties.AddEstablishmentUserSubscription.AddEstablishmentUserSubscriptionFlow.Variables;
		DECLARE inHeaderRef REFERENCE TO Environment.Variables.Header;
		DECLARE inBodyRef REFERENCE TO Environment.Variables.Body;
		--
		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2;
		
		
		IF (inBodyRef.PaymentReference IS NULL) OR (inBodyRef.PaymentReference = '') OR (NOT EXISTS(inBodyRef.PaymentReference[]))   THEN
			PROPAGATE TO TERMINAL 'out1' DELETE NONE; 
			RETURN FALSE;
		END IF;	 
		
		-- prepare request for Calculate UM Subs Price
		CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
		SET OutputRoot.XMLNSC.CalculateUserManagementSubscriptionPriceRq.Header = inHeaderRef;
		DECLARE outHeaderRef REFERENCE TO OutputRoot.XMLNSC.CalculateUserManagementSubscriptionPriceRq.Header;
		CREATE LASTCHILD OF OutputRoot.XMLNSC.CalculateUserManagementSubscriptionPriceRq NAME 'Body';
		DECLARE outBodyRef REFERENCE TO OutputRoot.XMLNSC.CalculateUserManagementSubscriptionPriceRq.Body;
		SET outHeaderRef.ServiceCode = propertiesRef.CalcUMSubsSC;
		SET outHeaderRef.ChannelId = propertiesRef.ChannelId;
		SET outBodyRef.LaborOfficeId = inBodyRef.SubscriptionsList.SubscriptionItem[1].LaborOfficeId;
		SET outBodyRef.EstablishmentSequence = inBodyRef.SubscriptionsList.SubscriptionItem[1].SequenceNumber;

		DECLARE listCount INT CARDINALITY(inBodyRef.SubscriptionsList.SubscriptionItem[]);
		DECLARE c INT 0;
		DECLARE i INT 1;
		DECLARE unique BOOLEAN TRUE;
		WHILE i <= listCount DO
			DECLARE j INT i + 1;
			SET unique = TRUE;
			X : WHILE j <= listCount DO
				IF inBodyRef.SubscriptionsList.SubscriptionItem[i].IdNo = inBodyRef.SubscriptionsList.SubscriptionItem[j].IdNo THEN
					SET unique = FALSE;
					LEAVE X;
				END IF;
				SET j = j +1;
			END WHILE;
			IF (unique) THEN
				SET c = c + 1;
				SET Environment.Variables.SubscriptionItem[c].LaborerIdNo = inBodyRef.SubscriptionsList.SubscriptionItem[i].IdNo;
			END IF;
			SET i = i + 1;
		END WHILE;
		SET outBodyRef.NbUsers = c;
		
		DECLARE z INTEGER 1;
		DECLARE LCount INTEGER CARDINALITY(Environment.Variables.SubscriptionItem[]);
		WHILE z <= LCount DO
			SET outBodyRef.LaborersList.LaborerIdNo[z] = Environment.Variables.SubscriptionItem[z].LaborerIdNo;
			SET z = z + 1;
		END WHILE;
		
		SET Environment.InternalServiceCaller.callCorrIDOffset = '60';
		RETURN TRUE;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


