BROKER SCHEMA com.qiwa.esb.getusereligibleservices

PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE GetUserEligibleServicesFlow_GetUserEligibleServices
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD  = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2  = Environment.Variables.MQRFH2;
		
		DECLARE loadProperitesRef REFERENCE TO Environment.Properties.GetUserEligibleServices.GetUserEligibleServicesFlow.Variables;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.GetUserEligibleServicesRs NAME 'Header';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.GetUserEligibleServicesRs NAME 'Body';
		
		DECLARE Inbody REFERENCE TO Environment.Variables.XMLNSC.GetUserEligibleServicesRq.Body;
		DECLARE outListRef REFERENCE TO OutputRoot.XMLNSC.GetUserEligibleServicesRs.Body;
		
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.GetUserEligibleServicesRs.Header;
		DECLARE rInputHeader REFERENCE TO Environment.Variables.XMLNSC.GetUserEligibleServicesRq.Header;
		
		
		
		IF  Inbody.IdNo is NOT NULL OR Inbody.UserId is NOT NULL  THEN
		
			CALL Create_esbXML_Response_Header(GetESBSuccessCode(),rInputHeader,rOutHeaderRef);
			
			DECLARE TotalRecordsCount INTEGER ;
	 		DECLARE IdNo CHARACTER Inbody.IdNo;
	 		DECLARE UserId INTEGER Inbody.UserId;
	 		DECLARE LaborOfficeId INTEGER Inbody.LaborOfficeId;
	 		DECLARE EstablishmentSequence INTEGER Inbody.EstablishmentSequence; 
	 		DECLARE StatusId INTEGER Inbody.StatusId;
	 		DECLARE ServiceId INTEGER Inbody.ServiceId; 
	 		DECLARE PageSize INTEGER Inbody.PageSize;
	 		DECLARE PageIndex INTEGER Inbody.PageIndex;
	 		 
			
			CALL Search_UserPrivileges  (	IdNo,
											UserId,
											LaborOfficeId,
											EstablishmentSequence,
											StatusId,
											ServiceId,
											PageSize,
											PageIndex,
											TotalRecordsCount,
											Environment.Variables.DB.ResultSet[]  );
					
					
			DECLARE resultSetCount INT CARDINALITY(Environment.Variables.DB.ResultSet[]);
			DECLARE i INT 1; 
			  
			  	SET OutputRoot.XMLNSC.GetUserEligibleServicesRs.Body.TotalRecordsCount = Environment.Variables.DB.ResultSet[1].TotalRecordsCount; 
			WHILE i <= resultSetCount DO 
				DECLARE resultSet REFERENCE TO Environment.Variables.DB.ResultSet[i];
				
				SET outListRef.EligibleServicesList.EligibleServicesItem[i].IdNo = resultSet.IDNO;
				SET outListRef.EligibleServicesList.EligibleServicesItem[i].UserId = resultSet.UserID;
				SET outListRef.EligibleServicesList.EligibleServicesItem[i].Name = resultSet.Name;
				
				SET outListRef.EligibleServicesList.EligibleServicesItem[i].LaborOfficeId = resultSet.LaborOfficeId;
				SET outListRef.EligibleServicesList.EligibleServicesItem[i].SequenceNumber = resultSet.SequenceNumber;
				
				SET outListRef.EligibleServicesList.EligibleServicesItem[i].Status.StatusId = resultSet.StatusId;
				SET outListRef.EligibleServicesList.EligibleServicesItem[i].Status.StatusEn = resultSet.StatusEn;
				SET outListRef.EligibleServicesList.EligibleServicesItem[i].Status.StatusAr = resultSet.StatusAr;
				
				SET outListRef.EligibleServicesList.EligibleServicesItem[i].Service.Service = resultSet.ServiceId;
				SET outListRef.EligibleServicesList.EligibleServicesItem[i].Service.ServiceNameEn = resultSet.ServiceNameEn;
				SET outListRef.EligibleServicesList.EligibleServicesItem[i].Service.ServiceNameAr = resultSet.ServiceNameAr;
					
					
					set i = i+1; 
			END WHILE;
			
		
			IF resultSetCount = 0 THEN
				CALL Create_esbXML_Response_Header(loadProperitesRef.NoDataFound, rInputHeader,rOutHeaderRef);
			ELSEIF Environment.Var.FailedToUpdate = 1 THEN 
				CALL Create_esbXML_Response_Header('E0000113', rInputHeader,rOutHeaderRef);				
			ELSE 
				CALL Create_esbXML_Response_Header(GetESBSuccessCode(),rInputHeader,rOutHeaderRef);
			END IF;			
					
										
		ELSE
			CALL Create_esbXML_Response_Header(loadProperitesRef.MissingParameter,rInputHeader,rOutHeaderRef);
		END IF;
		
		
		
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	
	CREATE PROCEDURE Search_UserPrivileges (	IN IdNo CHARACTER,
												IN UserID INTEGER,
												IN LaborOfficeId INTEGER,
												IN EstablishmentSequence INTEGER,
												IN StatusId INTEGER,
												IN ServiceId INTEGER,
												IN PageSize INTEGER,
												IN PageIndex INTEGER,
												INOUT TotalRecordsCount INTEGER )
							 					
												
	LANGUAGE DATABASE DYNAMIC RESULT SETS 1 
    EXTERNAL NAME "dbo.Search_UserPrivileges"; 
    
    
    
END MODULE;
