BROKER SCHEMA com.qiwa.esb.getqiwaworkspaceservices
PATH Qiwa.Framework.Lib;


CREATE COMPUTE MODULE GetQiwaWorkspaceEstablishmentsFlow_Response
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();
		DECLARE EV REFERENCE TO Environment.Variables;
		SET OutputRoot.Properties = EV.Properties;
		SET OutputRoot.MQMD 	  = EV.MQMD;
		SET OutputRoot.MQRFH2 	  = EV.MQRFH2;
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.GetQiwaWorkspaceEstablishments.GetQiwaWorkspaceEstablishmentsFlow;
		DECLARE rInHeaderRef REFERENCE TO EV.XMLNSC.GetQiwaWorkspaceEstablishmentsRq.Header;
		DECLARE rInBodyRef REFERENCE TO EV.XMLNSC.GetQiwaWorkspaceEstablishmentsRq.Body;
		DECLARE rInBodyRef1 REFERENCE TO EV.CheckUserEstablishmentsEligibilityRs;
		   
		
		CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
	    SET OutputRoot.XMLNSC.GetQiwaWorkspaceEstablishmentsRs.Header = rInHeaderRef;
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.GetQiwaWorkspaceEstablishmentsRs.Header;
		CREATE LASTCHILD OF OutputRoot.XMLNSC.GetQiwaWorkspaceEstablishmentsRs NAME 'Body';  
		DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.GetQiwaWorkspaceEstablishmentsRs.Body;
		DECLARE i,j INT 1;
		DECLARE EligCount INT CARDINALITY(rInBodyRef1.EligibleEstablishmentsList.EligibleEstablishmentsItem[]);

		IF 	EXISTS(rInBodyRef1.EligibleEstablishmentsList.EligibleEstablishmentsItem[]) OR EXISTS(rInBodyRef1.NonEligibleEstablishmentsList.NonEligibleEstablishmentsItem[]) THEN
--Looping EligibleEstablishmentsList			
			FOR SOURCE AS rInBodyRef1.EligibleEstablishmentsList.EligibleEstablishmentsItem[] DO
				SET rOutBodyRef.EligibleEstablishmentsList.EligibleEstablishmentsItem[i].LaborOfficeId        = SOURCE.LaborOfficeId;
				SET rOutBodyRef.EligibleEstablishmentsList.EligibleEstablishmentsItem[i].EstablishmentSequence = SOURCE.EstablishmentSequence;
				SET rOutBodyRef.EligibleEstablishmentsList.EligibleEstablishmentsItem[i].EstablishmentName = SOURCE.EstablishmentName;
				SET rOutBodyRef.EligibleEstablishmentsList.EligibleEstablishmentsItem[i].IsMainBranch = SOURCE.IsMainBranch;
				SET rOutBodyRef.EligibleEstablishmentsList.EligibleEstablishmentsItem[i].UnifiedNumberId = SOURCE.UnifiedNumber;
			    SET rOutBodyRef.EligibleEstablishmentsList.EligibleEstablishmentsItem[i].EstablishmentId = SOURCE.EstablishmentId;
				SET rOutBodyRef.EligibleEstablishmentsList.EligibleEstablishmentsItem[i].UserType = SOURCE.UserType;
			    SET i = i + 1;
			END FOR;
			
--Looping NonEligibleEstablishmentsList			
			FOR SOURCE1 AS rInBodyRef1.NonEligibleEstablishmentsList.NonEligibleEstablishmentsItem[] DO
				SET rOutBodyRef.NonEligibleEstablishmentsList.NonEligibleEstablishmentsItem[j].LaborOfficeId    = SOURCE1.LaborOfficeId;
				SET rOutBodyRef.NonEligibleEstablishmentsList.NonEligibleEstablishmentsItem[j].EstablishmentSequence = SOURCE1.EstablishmentSequence;
				SET rOutBodyRef.NonEligibleEstablishmentsList.NonEligibleEstablishmentsItem[j].EstablishmentName = SOURCE1.EstablishmentName;
			    SET rOutBodyRef.NonEligibleEstablishmentsList.NonEligibleEstablishmentsItem[j].IsMainBranch = SOURCE1.IsMainBranch;
			    SET rOutBodyRef.NonEligibleEstablishmentsList.NonEligibleEstablishmentsItem[j].UnifiedNumberId = SOURCE1.UnifiedNumber;
			    SET rOutBodyRef.NonEligibleEstablishmentsList.NonEligibleEstablishmentsItem[j].EligibleForSelfSubscripition = SOURCE1.EligibleForSelfSubscripition;
			    SET rOutBodyRef.NonEligibleEstablishmentsList.NonEligibleEstablishmentsItem[j].EstablishmentId = SOURCE1.EstablishmentId;
			    SET rOutBodyRef.NonEligibleEstablishmentsList.NonEligibleEstablishmentsItem[j].UserType = SOURCE1.UserType;
			    SET rOutBodyRef.NonEligibleEstablishmentsList.NonEligibleEstablishmentsItem[j].SubscriptionStatusId = SOURCE1.SubscriptionStatusId; 
			     
			     SET j = j + 1;
			END FOR;
		
			CALL Create_esbXML_Response_Header(GetESBSuccessCode(),rInHeaderRef,rOutHeaderRef);	
			
		ELSE
		   SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.NoEstablishmentsError;
		   PROPAGATE TO TERMINAL 'out1';
		   RETURN FALSE;	
	END IF;					
						
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE GetQiwaWorkspaceServicesFlow_Response
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
