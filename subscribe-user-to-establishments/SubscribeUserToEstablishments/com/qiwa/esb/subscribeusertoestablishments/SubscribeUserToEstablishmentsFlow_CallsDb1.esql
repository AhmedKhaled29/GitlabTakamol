BROKER SCHEMA com.qiwa.esb.subscribeusertoestablishments
PATH Qiwa.Framework.Lib; 

CREATE COMPUTE MODULE SubscribeUserToEstablishmentsFlow_CallsDb1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
			-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD  = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2  = Environment.Variables.MQRFH2;
		
		-- build the response structure 
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.SubscribeUserToEstablishmentsRs  NAME 'Header';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.SubscribeUserToEstablishmentsRs  NAME 'Body'; 

	    DECLARE NoData CHAR Environment.Properties.subscribeUserToEstablishments.subscribeUserToEstablishmentsFlow.Variables.NoData;
	    DECLARE NotValid CHAR Environment.Properties.subscribeUserToEstablishments.subscribeUserToEstablishmentsFlow.Variables.NotValid; 
	    DECLARE CrtUserSubError CHAR Environment.Properties.subscribeUserToEstablishments.subscribeUserToEstablishmentsFlow.Variables.CrtUserSub; 
	    DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.subscribeUserToEstablishments.subscribeUserToEstablishmentsFlow;
	    
		DECLARE Inbody REFERENCE TO Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Body;  
		DECLARE reqHeaderRef REFERENCE TO Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Header;
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.SubscribeUserToEstablishmentsRs.Header; 
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC.SubscribeUserToEstablishmentsRs.Body;
		IF Environment.Variables.PAY = 1 THEN  
		CALL Create_esbXML_Response_Header(loadedPropertiesRef.Variables.PaymentNeeded,reqHeaderRef,rOutHeaderRef);  
		ELSE 
		DECLARE size INT CARDINALITY(Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Body.SubscriptionsList.SubscriptionItem[]);
		
	     DECLARE i INT 1;     
	     
	     
	     
	     
	     DECLARE codeLoop INT CARDINALITY( Environment.Variabl.GetUserRs.UserEstablishmentsList.UserEstablishmentsItem[] );  
	     DECLARE codeValue INT 0;    
	     DECLARE codeValuetwo INT 0;
	     -- check if the user is a unfied owner and if the establishments match the ones requested 
		 WHILE i<=codeLoop DO 
		   DECLARE n INT 1; 
		  	WHILE n<= size DO  	 
			  	IF (Environment.Variabl.GetUserRs.UserEstablishmentsList.UserEstablishmentsItem[i].Establishment.LaborOfficeId = Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Body.SubscriptionsList.SubscriptionItem[n].LaborOfficeId AND Environment.Variabl.GetUserRs.UserEstablishmentsList.UserEstablishmentsItem[i].Establishment.SequenceNumber = Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Body.SubscriptionsList.SubscriptionItem[n].SequenceNumber) THEN    
				    IF  Environment.Variabl.GetUserRs.UserEstablishmentsList.UserEstablishmentsItem[i].AuthorizationType.Code = 2 THEN 	
				     	SET codeValue = codeValue + 1; 
				    END IF;
				    	     
			  	END IF; 
			 	SET n = n+1;
		    END WHILE;
		 	      
		 SET i = i+1;     
		 END WHILE; 
		 
		 
		 
	   IF codeValue = size THEN 
			 -- Declaer Ref to XML object
			SET Environment.XmlObject VALUE = NULL;
		    DECLARE xmlObj reference to Environment.XmlObject;
			DECLARE index INT 1;
			DECLARE c INT 1; 
			-- store the values in xml object	
	        WHILE index <= codeValue DO 	 
			    SET xmlObj.UsersSubscriptionList.UserSubscription[index].IdNo =  Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Header.UserInfo.IDNumber ;		      			
				SET xmlObj.UsersSubscriptionList.UserSubscription[index].LaborOfficeId = Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Body.SubscriptionsList.SubscriptionItem[index].LaborOfficeId;
				SET xmlObj.UsersSubscriptionList.UserSubscription[index].SequenceNumber =Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Body.SubscriptionsList.SubscriptionItem[index].SequenceNumber; 
				SET xmlObj.UsersSubscriptionList.UserSubscription[index].UnifiedNumber =Environment.Variabl.GetInfo.EstablishmentInformation.UnifiedNumberId; 
			    SET index = index +1;
	        END WHILE; 
			 		      	
			--Create XML object XMLNSC Domain 
			Create FIRSTCHILD of Environment DOMAIN 'XMLNSC' Name 'xml';
	        --SET UsersSubsciptionList value  
			SET Environment.xml.UsersSubscriptionList = xmlObj.UsersSubscriptionList;
	        --Pars UsersSubsciptionList object to XMl object
			SET Environment.xml.UsersSubscriptionList = CAST(ASBITSTREAM(Environment.xml CCSID 1208 ) AS CHARACTER CCSID 1208);
			DECLARE userSubscribtion CHAR ;
			SET userSubscribtion = 	CAST (Environment.xml.UsersSubscriptionList AS CHARACTER); 
			 	
			 DECLARE ID INT;	
			 CALL Check( userSubscribtion) INTO ID; 
		 
		     IF ID = -1 THEN 
		     	CALL Create_esbXML_Response_Header(NotValid,reqHeaderRef,rOutHeaderRef); 
		     ELSE 
			      SET Environment.XmlObjectTwo VALUE = NULL;  
			      DECLARE xmlObjtwo reference to Environment.XmlObjectTwo;  
			      DECLARE z INT 1;	 
			      WHILE z <= codeValue DO  
					SET xmlObjtwo.UsersSubscriptionList.UserSubscription[z].IdNo =  Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Header.UserInfo.IDNumber ;		      			
					SET xmlObjtwo.UsersSubscriptionList.UserSubscription[z].Duration = Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Body.SubscriptionsList.SubscriptionItem[z].Duration;
					SET xmlObjtwo.UsersSubscriptionList.UserSubscription[z].LaborOfficeId = Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Body.SubscriptionsList.SubscriptionItem[z].LaborOfficeId;
					SET xmlObjtwo.UsersSubscriptionList.UserSubscription[z].UnifiedNumber = Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Body.SubscriptionsList.SubscriptionItem[z].UnifiedNumber; 
					SET xmlObjtwo.UsersSubscriptionList.UserSubscription[z].SequenceNumber = Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Body.SubscriptionsList.SubscriptionItem[z].SequenceNumber;
					SET xmlObjtwo.UsersSubscriptionList.UserSubscription[z].SubscriptionId = Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Body.SubscriptionsList.SubscriptionItem[z].SubscriptionId; 
				    SET z =z+1; 
				 END WHILE;	
			      
			    --Create XML object XMLNSC Domain 
				Create FIRSTCHILD of Environment DOMAIN 'XMLNSC' Name 'xml';
		        --SET UsersSubsciptionList value   
				SET Environment.xml.UsersSubscriptionList = xmlObjtwo.UsersSubscriptionList;
		        --Pars UsersSubsciptionList object to XMl object
				SET Environment.xml.UsersSubscriptionList = CAST(ASBITSTREAM(Environment.xml CCSID 1208 ) AS CHARACTER CCSID 1208);
				DECLARE userSubscribtion CHAR ;
				SET userSubscribtion = 	CAST (Environment.xml.UsersSubscriptionList AS CHARACTER); 
				 
				 DECLARE PaymentReference CHARACTER Environment.Variables.XMLNSC.SubscribeUserToEstablishmentsRq.Body.PaymentReference; 		 
			     DECLARE value INT ;	 
				 CALL callcreate(  
				 PaymentReference,
				 userSubscribtion ) INTO value; 
				 IF value = -1 THEN 
				 	CALL Create_esbXML_Response_Header(CrtUserSubError,reqHeaderRef,rOutHeaderRef); 
				 ELSE	
			      CALL Create_esbXML_Response_Header(GetESBSuccessCode(),reqHeaderRef,rOutHeaderRef); 
				 END IF;
			  END IF;  
		 
		 ELSE 
		 	CALL Create_esbXML_Response_Header(NoData,reqHeaderRef,rOutHeaderRef); 
		 
		 END IF;
		 	 
		 
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	
	CREATE PROCEDURE Check(  
				 		  	 IN UserSubScribtion CHARACTER  
				 		  )   
				 		  
     RETURNS INTEGER LANGUAGE DATABASE
    EXTERNAL NAME "dbo.Check_UsersSubsriptionsValidity";
	
	
	
	CREATE PROCEDURE callcreate(  
	                         IN PaymentReference CHARACTER, 
				 		  	 IN UserSubScribtion CHARACTER  
				 		  )   
				 		  
    			 		  
     RETURNS INTEGER LANGUAGE DATABASE
    EXTERNAL NAME "dbo.Create_UsersSubscriptions"; 
	
	
END MODULE;
		