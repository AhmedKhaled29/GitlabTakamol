BROKER SCHEMA com.qiwa.esb.getestablishmentauthorizeduser
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE GetEstablishmentAuthorizedUserFlow_Rs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.GetEstablishmentAuthorizedUser.GetEstablishmentAuthorizedUserFlow;
		DECLARE rInBodyRef REFERENCE TO Environment.Variables.XMLNSC.GetEstablishmentAuthorizedUserRq.Body;
		DECLARE rInHeaderRef REFERENCE TO Environment.Variables.XMLNSC.GetEstablishmentAuthorizedUserRq.Header;

		SET OutputRoot.Properties = Environment.Variables.Properties;
		SET OutputRoot.MQMD = Environment.Variables.MQMD;
		SET OutputRoot.MQRFH2 = Environment.Variables.MQRFH2;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.GetEstablishmentAuthorizedUserRs NAME 'Header';
		
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.GetEstablishmentAuthorizedUserRs.Header;	
		DECLARE AuthIdsCommSep CHARACTER;
		
		IF EXISTS (InputRoot.XMLNSC.resultSet.row[]) THEN
			CALL Create_esbXML_Response_Header(GetESBSuccessCode(),rInHeaderRef,rOutHeaderRef);
			DECLARE z INT 1;
			DECLARE u INT 1;
			DECLARE MLSDrow ROW;
			DECLARE col CHARACTER;
    		DECLARE rResultRow REFERENCE TO InputRoot.XMLNSC.resultSet.row[1];
     		WHILE LASTMOVE(rResultRow) DO
     			--Handling Null Values and Saving to Environment Variables
     			WHILE u <= 14 DO
     				SET col = loadedPropertiesRef.Variables.column.{'column' || CAST(u AS CHAR)};
     				
				 	SET MLSDrow.{col}[]= (
                	SELECT R.value as ColValue
                	FROM rResultRow.column[] as R
                	WHERE R.name = loadedPropertiesRef.Variables.column.{'column' || CAST(u AS CHAR)});
                	
                	IF MLSDrow.{col}.ColValue.isNull = true THEN 
                		SET MLSDrow.{col}.ColValue = NULL;
                	END IF;
                	
				 	SET Environment.Variables.rows[z].{col} =	MLSDrow.{col}.ColValue;
				
				 	SET u = u + 1;
				 END WHILE;
				 
				 IF Environment.Variables.rows[z].{loadedPropertiesRef.Variables.column.column7} = loadedPropertiesRef.Variables.AuthorizedTypeOne OR Environment.Variables.rows[z].{loadedPropertiesRef.Variables.column.column7} = loadedPropertiesRef.Variables.AuthorizedTypeTwo THEN
				 	IF z = 1 THEN
				 		SET AuthIdsCommSep = CAST(Environment.Variables.rows[z].{loadedPropertiesRef.Variables.column.column1}AS CHARACTER);
				 	ELSE
				 		SET AuthIdsCommSep = AuthIdsCommSep || ',' || CAST(Environment.Variables.rows[z].{loadedPropertiesRef.Variables.column.column1}AS CHARACTER);
				 	END IF;
				 END IF; 			
     			MOVE rResultRow NEXTSIBLING REPEAT NAME;
     			SET z = z + 1;
     			SET u = 1; -- refering to first column again preparing for next record
     		END WHILE;
     		
     		ELSE 
				CALL Create_esbXML_Response_Header(loadedPropertiesRef.Variables.EstAuthorizedError,rInHeaderRef,rOutHeaderRef);
		END IF;
		SET Environment.Variables.AuthorizedIdNos	=	AuthIdsCommSep;
		

		IF LENGTH(AuthIdsCommSep) > 0 THEN
			CALL Get_EstablishmentAuthorizedUser (CAST(rInBodyRef.LaborOfficeId AS INTEGER), 
													CAST(rInBodyRef.SequenceNumber AS INTEGER),
														CAST(AuthIdsCommSep AS CHARACTER),Environment.Variables.MLSDDB1.Result[]); 
		END IF;
		IF ((SQLNATIVEERROR <> 0) OR (SQLCODE <> 0)) OR NOT EXISTS(Environment.Variables.MLSDDB1.Result[]) THEN
			CALL Create_esbXML_Response_Header(loadedPropertiesRef.Variables.AuthorizedUserError,rInHeaderRef,rOutHeaderRef);
		ELSE 
			CREATE LASTCHILD OF OutputRoot.XMLNSC.GetEstablishmentAuthorizedUserRs NAME 'Body';
			DECLARE rOutBodyRef REFERENCE TO OutputRoot.XMLNSC.GetEstablishmentAuthorizedUserRs.Body;
			CALL Create_esbXML_Response_Header(GetESBSuccessCode(),rInHeaderRef,rOutHeaderRef);
			SET rOutBodyRef.AuthorizedIdNo = Environment.Variables.MLSDDB1.Result.AuthorizedIdNo;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	CREATE PROCEDURE Get_EstablishmentAuthorizedUser (IN LaborOfficeId INTEGER,
	IN SequenceNumber INTEGER,
	IN IdNumbers CHARACTER)
	LANGUAGE DATABASE DYNAMIC RESULT SETS 1 EXTERNAL NAME "dbo.Get_EstablishmentAuthorizedUser";
END MODULE;