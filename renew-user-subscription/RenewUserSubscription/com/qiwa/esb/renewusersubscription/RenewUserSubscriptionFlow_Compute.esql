BROKER SCHEMA com.qiwa.esb.renewusersubscription
PATH Qiwa.Framework.Lib;


CREATE COMPUTE MODULE Get_UserLatestSubscriptionServicesDBCALL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		IF FIELDNAME(Environment.Variables) IS NULL THEN
			CREATE FIELD Environment.Variables;
		END IF;
		DECLARE EV REFERENCE TO Environment.Variables;
		DECLARE Result, Result1 INTEGER;
		DECLARE UserSubScriptions CHARACTER;
		SET OutputRoot.Properties = EV.Properties;
		SET OutputRoot.MQMD = EV.MQMD;
		SET OutputRoot.MQRFH2 = EV.MQRFH2;
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.RenewUserSubscription.RenewUserSubscriptionFlow;
		DECLARE rInHeaderRef REFERENCE TO EV.XMLNSC.RenewUserSubscriptionRq.Header;
		DECLARE rInBodyRef REFERENCE TO EV.XMLNSC.RenewUserSubscriptionRq.Body;
		DECLARE i,cnt1,cnt3,cnt4 INTEGER 1;
		SET EV.cnt2=1;
		SET EV.EstCntFromSP = 1;
		SET EV.CallProc	=	FALSE;
		SET EV.EstsCompare	=	FALSE;
--		For each establishment from request and to call the Terminate_UserLatestSubscriptions SP
		CREATE FIELD EV.SPXML;
		CREATE FIRSTCHILD OF EV.SPXML DOMAIN 'XMLNSC';
		FOR SOURCE AS rInBodyRef.EstablishmentsList.EstablishmentItem[] DO
			SET EV.SPXML.XMLNSC.UsersSubscriptionList.UserSubscription[i].LaborOfficeId = SOURCE.LaborOfficeId;
			SET EV.SPXML.XMLNSC.UsersSubscriptionList.UserSubscription[i].SequenceNumber = SOURCE.SequenceNumber;
			SET i = i + 1;
		END FOR;

		SET UserSubScriptions = CAST(ASBITSTREAM(EV.SPXML.XMLNSC CCSID 1208) AS CHARACTER CCSID 1208);
		CALL Get_UserLatestSubscriptionServices (COALESCE(CAST(rInBodyRef.IdNo AS INTEGER),NULL),
											COALESCE(CAST(UserSubScriptions AS CHARACTER),NULL),EV.QwiaDB.ResultSet[]);

		IF ((SQLNATIVEERROR <> 0) OR (SQLCODE <> 0)) OR NOT EXISTS(EV.QwiaDB.ResultSet[]) THEN
			SET OutputRoot.XMLNSC.RenewUserSubscriptionRs.Header = rInHeaderRef;
			SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.NoSubsToBeReNewed; 
			PROPAGATE TO TERMINAL 'out2';
			RETURN FALSE;
		ELSE
--			 To call GetLaborerInformation, if the ServiceId is 12
			CREATE FIELD EV.SPXML1;
			CREATE FIRSTCHILD OF EV.SPXML1 DOMAIN 'XMLNSC';
--			Help to mapp ServiceId for the AddOrUpdate Serviced 
			CREATE FIELD EV.SPXML2;
			CREATE FIRSTCHILD OF EV.SPXML2 DOMAIN 'XMLNSC';
			FOR TSOURCE AS EV.QwiaDB.ResultSet[] DO
				IF TSOURCE.ServiceID = 12 THEN
					SET EV.SPXML1.XMLNSC.UsersSubscriptionList.UserSubscription[cnt1].IdNo = COALESCE(rInBodyRef.IdNo,NULL);
					SET EV.SPXML1.XMLNSC.UsersSubscriptionList.UserSubscription[cnt1].LaborOfficeId = TSOURCE.LaborOfficeId;
					SET EV.SPXML1.XMLNSC.UsersSubscriptionList.UserSubscription[cnt1].SequenceNumber = TSOURCE.SequenceNumber;
					SET EV.SPXML1.XMLNSC.UsersSubscriptionList.UserSubscription[cnt1].ServiceID=TSOURCE.ServiceID;
					SET cnt1 = cnt1 + 1;
				ELSEIF LENGTH(CAST(TSOURCE.ServiceID AS CHAR)) > 0 THEN
					SET EV.SPXML2.XMLNSC.UsersSubscriptionList.UserSubscription[EV.cnt2].LaborOfficeId = TSOURCE.LaborOfficeId;
					SET EV.SPXML2.XMLNSC.UsersSubscriptionList.UserSubscription[EV.cnt2].SequenceNumber = TSOURCE.SequenceNumber;
					SET EV.SPXML2.XMLNSC.UsersSubscriptionList.UserSubscription[EV.cnt2].ServiceID=TSOURCE.ServiceID;
					SET EV.cnt2 = EV.cnt2 + 1;
				END IF;
			END FOR;
-- To call GetLaborerInformation Service
			IF EXISTS(EV.SPXML1.XMLNSC.UsersSubscriptionList.UserSubscription[]) THEN
				PROPAGATE TO TERMINAL 'out';
				IF EV.CallProc = TRUE THEN 
					RETURN FALSE;
				END IF;
			END IF;

			SET UserSubScriptions = CAST(ASBITSTREAM(EV.SPXML.XMLNSC CCSID 1208) AS CHARACTER CCSID 1208);
			 CALL Terminate_UserLatestSubscriptions (COALESCE(CAST(rInBodyRef.IdNo AS INTEGER),NULL),
			 									COALESCE(CAST(UserSubScriptions AS CHARACTER),NULL)) INTO Result;  
					
--			To call Create_UsersSubscriptions SP
			CREATE FIELD EV.SPXML3;
			CREATE FIRSTCHILD OF EV.SPXML3 DOMAIN 'XMLNSC';
			FOR SOURCE AS EV.SPXML.XMLNSC.UsersSubscriptionList.UserSubscription[] DO
				SET EV.SPXML3DATA = THE(SELECT * FROM EV.QwiaDB.ResultSet[] AS P WHERE P.SequenceNumber=SOURCE.SequenceNumber AND P.LaborOfficeId=SOURCE.LaborOfficeId);
				IF EXISTS(EV.SPXML3DATA[]) THEN
					SET EV.EstCntFromSP	=	EV.EstCntFromSP + 1;
				END IF;
				SET EV.SPXML3.XMLNSC.UsersSubscriptionList.UserSubscription[cnt3].IdNo = COALESCE(rInBodyRef.IdNo,NULL);
				SET EV.SPXML3.XMLNSC.UsersSubscriptionList.UserSubscription[cnt3].LaborOfficeId = SOURCE.LaborOfficeId; 
				SET EV.SPXML3.XMLNSC.UsersSubscriptionList.UserSubscription[cnt3].SequenceNumber = SOURCE.SequenceNumber;
				SET EV.SPXML3.XMLNSC.UsersSubscriptionList.UserSubscription[cnt3].Duration = EV.SPXML3DATA.Duration;
				SET EV.SPXML3.XMLNSC.UsersSubscriptionList.UserSubscription[cnt3].SubscriptionId = EV.SPXML3DATA.SubscriptionId;
				SET cnt3 = cnt3 + 1;
			END FOR;

			IF i <> EV.EstCntFromSP THEN
				SET EV.EstsCompare	=	TRUE; 
			END IF;

			SET UserSubScriptions = CAST(ASBITSTREAM(EV.SPXML3.XMLNSC CCSID 1208) AS CHARACTER CCSID 1208);
			 CALL Create_UsersSubscriptions (COALESCE(CAST(rInBodyRef.PaymentReference AS CHARACTER),NULL),
			 								COALESCE(CAST(UserSubScriptions AS CHARACTER),NULL)) INTO Result1;		

			COMMIT;
			
			
			IF EXISTS(EV.SPXML2.XMLNSC.UsersSubscriptionList.UserSubscription[]) THEN
				PROPAGATE TO TERMINAL 'out1';
			ELSE 
				SET OutputRoot.XMLNSC.RenewUserSubscriptionRs.Header = rInHeaderRef;
				SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.ServiceIdNullError;
				PROPAGATE TO TERMINAL 'out2';
			END IF;
		END IF; 
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;



CREATE PROCEDURE Get_UserLatestSubscriptionServices (IN IdNo INTEGER,
												IN UserSubScriptions CHARACTER)
LANGUAGE DATABASE DYNAMIC RESULT SETS 1 EXTERNAL NAME "dbo.Get_UserLatestSubscriptionServices";


CREATE PROCEDURE Terminate_UserLatestSubscriptions (IN IdNo INTEGER,
												IN UserSubScriptions CHARACTER) RETURNS INTEGER
LANGUAGE DATABASE EXTERNAL NAME"dbo.Terminate_UserLatestSubscriptions";


CREATE PROCEDURE Create_UsersSubscriptions (IN PaymentReference CHARACTER,
										IN UserSubScriptions CHARACTER) RETURNS INTEGER
LANGUAGE DATABASE EXTERNAL NAME "dbo.Create_UsersSubscriptions";
END MODULE;