BROKER SCHEMA com.qiwa.esb.addorupdateuserprivileges
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE AddOrUpdateUserPrivilegesFlow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		IF FIELDNAME(Environment.Variables) IS NULL THEN
			CREATE FIELD Environment.Variables;
		END IF; 
		
		DECLARE EV REFERENCE TO Environment.Variables;
		SET OutputRoot.Properties = EV.Properties;
		SET OutputRoot.MQMD = EV.MQMD;
		SET OutputRoot.MQRFH2 = EV.MQRFH2;
		
		DECLARE loadedPropertiesRef REFERENCE TO Environment.Properties.AddOrUpdateUserPrivileges.AddOrUpdateUserPrivilegesFlow;
		DECLARE rInHeaderRef REFERENCE TO EV.XMLNSC.AddOrUpdateUserPrivilegesRq.Header;
		DECLARE rInBodyRef REFERENCE TO EV.XMLNSC.AddOrUpdateUserPrivilegesRq.Body;	
		
		CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
		    SET OutputRoot.XMLNSC.AddOrUpdateUserPrivilegesRs.Header = rInHeaderRef;
			DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.AddOrUpdateUserPrivilegesRs.Header;
			
		 
-- create XML 
		CREATE FIELD EV.CHECKXML;
		CREATE FIRSTCHILD OF EV.CHECKXML DOMAIN 'XMLNSC';
		
-- store the values in xml object
		DECLARE a INT 1;   
		FOR SOURCE AS Environment.Variabl.NotownedData.item[] DO
			SET EV.CHECKXML.XMLNSC.UsersSubscriptionList.UserSubscription[a].LaborOfficeId = SOURCE.LaborOfficeId;
			SET EV.CHECKXML.XMLNSC.UsersSubscriptionList.UserSubscription[a].SequenceNumber = SOURCE.EstablishmentSequence;
			SET a = a + 1;
		END FOR;

		DECLARE IdNo, UserSubScriptions CHAR;		
--Pars UsersSubsciptionList object to XMl object
		SET UserSubScriptions = CAST(ASBITSTREAM(EV.CHECKXML.XMLNSC CCSID 1208) AS CHARACTER CCSID 1208);

		SET IdNo = rInBodyRef.IdNo;

		CALL Check_UserSubscriptions(IdNo,
										UserSubScriptions,
											EV.DB.ResultSet[]);

		IF ((SQLNATIVEERROR <> 0) OR (SQLCODE <> 0) ) THEN
		 	SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.ErrorCode;			
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		ELSE        
			DECLARE b INT 1;
			DECLARE c INT 1;

			DECLARE y INT CARDINALITY(EV.DB.ResultSet[]);

			FOR SOURCE1 AS EV.DB.ResultSet[] DO
				IF SOURCE1.HasActiveSubscriptions = true THEN
					SET EV.ActiveSubscription.item[b].LaborOfficeId = SOURCE1.LaborOfficeId;
					SET EV.ActiveSubscription.item[b].SequenceNumber = SOURCE1.SequenceNumber;
					 
					
					SET b = b+1; 
				ELSE
					SET EV.NoActiveSubscription.item[c].LaborOfficeId = SOURCE1.LaborOfficeId;
					SET EV.NoActiveSubscription.item[c].SequenceNumber = SOURCE1.SequenceNumber;
					SET c = c+1;
				END IF; 
			END FOR;		
            --SET EV.Active.size = b ; 
			DECLARE Z INT CARDINALITY(EV.NoActiveSubscription.item[]);
			IF Z = y THEN  
			 	SET Environment.Variables.MWResponse.status = loadedPropertiesRef.Variables.InactiveUser;
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			END IF;
		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;	


CREATE PROCEDURE Check_UserSubscriptions (IN IdNo CHARACTER,
											IN UserSubscriptions CHARACTER)
LANGUAGE DATABASE DYNAMIC RESULT SETS 1 EXTERNAL NAME "dbo.Check_UserSubscriptions";																


END MODULE;
 

 