



BROKER SCHEMA com.qiwa.esb.EncryptDecrypt
PATH Qiwa.Framework.Lib;

CREATE COMPUTE MODULE EncryptDecryptFlow_EncDec
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE Key CHAR '8@$%BR#!$' ; --8@$%BR#!$ 
		CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Array)Data ;
		DECLARE outChar CHARACTER ;
		DECLARE Text CHARACTER CAST(InputRoot.JSON.Data.Text AS CHAR) ;
		IF InputRoot.JSON.Data.EncryptDecrypt= '1' THEN --Encryption
			-- SET Environment.Variables.Result = PASSTHRU ('SELECT EncDec.Fn_EncryptData (?)' ,Text ) ;
			SET outChar = encryptMsg(Text, Key);

		ELSEIF InputRoot.JSON.Data.EncryptDecrypt= '2' THEN --Decryption
			SET outChar = decryptMsg(Text, Key);
			-- SET Environment.Variables.Result = PASSTHRU ('SELECT EncDec.Fn_DecryptData (?)' ,Text ) ;
		ELSE
			SET OutputRoot = InputRoot;
			SET OutputRoot.JSON.Data.EncryptDecrypt = 'InvalidInput/ Should be 1 for Encryption and  2 Decryption';
			DELETE FIELD OutputRoot.JSON.Data.Text ;
			RETURN TRUE;
		END IF;

		SET OutputRoot = InputRoot;
		DELETE FIELD OutputRoot.JSON.Data.Text ;
		DELETE FIELD OutputRoot.JSON.Data.EncryptDecrypt;
		SET OutputRoot.JSON.Data.Result= outChar ;
		-- SET OutputRoot.XMLNSC.Data.Status ='SUCCESS' ;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;



END MODULE;