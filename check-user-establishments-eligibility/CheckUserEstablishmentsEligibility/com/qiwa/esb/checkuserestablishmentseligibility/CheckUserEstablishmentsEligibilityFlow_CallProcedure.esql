 BROKER SCHEMA com.qiwa.esb.checkuserestablishmentseligibility
PATH Qiwa.Framework.Lib;  


CREATE COMPUTE MODULE CheckUserEstablishmentsEligibilityFlow_CallProcedure
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		


		DECLARE Inbody REFERENCE TO Environment.Variables.XMLNSC.CheckUserEstablishmentsEligibilityRq.Body;  
		DECLARE reqHeaderRef REFERENCE TO Environment.Variables.XMLNSC.CheckUserEstablishmentsEligibilityRq.Header;
		DECLARE rOutHeaderRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEstablishmentsEligibilityRs.Header; 
		DECLARE OutRef REFERENCE TO OutputRoot.XMLNSC.CheckUserEstablishmentsEligibilityRs.Body;
		DECLARE size INT CARDINALITY(Environment.Variables.XMLNSC.CheckUserEstablishmentsEligibilityRq.Body.EstablishmentsList.EstablishmentsItem[]);
	    DECLARE someEstab CHAR Environment.Properties.CheckUserEstablishmentsEligibility.CheckUserEstablishmentsEligibilityFlow.Variables.someEstabs;
		DECLARE allEstab CHAR Environment.Properties.CheckUserEstablishmentsEligibility.CheckUserEstablishmentsEligibilityFlow.Variables.AllEstabs;
		DECLARE NoEstabs CHAR Environment.Properties.CheckUserEstablishmentsEligibility.CheckUserEstablishmentsEligibilityFlow.Variables.NoEstError;
		
		
		DECLARE codeLoop INT CARDINALITY( Environment.Variabl.GetUserRs.UserEstablishmentsList.UserEstablishmentsItem[] );  
		
		  
		
		--the number of codes than are not unified users	
	    DECLARE itemloop INT CARDINALITY( Environment.Variabl.GetUserRs.UserEstablishmentsList.*[]);  
	  	--DECLARE i INT 1;
	  	-- Declaer Ref to XML object
		SET Environment.XmlObject VALUE = NULL;
		DECLARE xmlObj reference to Environment.XmlObject;
		DECLARE index INT 1;  
        DECLARE userSubscribtion CHAR ;
        
	   	DECLARE IdNo CHARACTER;
	   	IF EXISTS ( Environment.Variabl.NonEligibleEst[]) THEN 
	   	
	   	
			   	Create FIRSTCHILD of Environment DOMAIN 'XMLNSC' Name 'xml';
		        --SET UsersSubscriptionList value 
				SET Environment.xml.UsersSubscriptionList = Environment.Variabl.NonEligibleEst.UsersSubscriptionList; 
		        --Pars UsersSubscriptionList object to XMl object
				SET Environment.xml.UsersSubscriptionList = CAST(ASBITSTREAM(Environment.xml CCSID 1208 ) AS CHARACTER CCSID 1208);
		        SET userSubscribtion = CAST( Environment.xml.UsersSubscriptionList AS CHARACTER );
			   	 
				
				--DECLARE ServiceId INT Environment.Variables.XMLNSC.CheckUserEstablishmentsEligibilityRq.Body.ServiceId; 
	   	ELSE 
	   		
	   		   SET userSubscribtion = NULL; 
	   	END IF; 
	   	-- if listAll is one (MLSD) then return all estab of the user whether it be mlsd or in db 
	   	DECLARE listAll INT Environment.Variabl.ListAll; 
		SET IdNo = CAST (Environment.Variables.XMLNSC.CheckUserEstablishmentsEligibilityRq.Body.IdNo AS CHARACTER );
	   	 
		DECLARE ServiceId INTEGER Inbody.ServiceId ; 
		CALL Check( 
                     IdNo,
                     COALESCE(CAST( ServiceId AS INTEGER),NULL), 
                     userSubscribtion,  
                     listAll, 
                     Environment.Variables.DB.ResultSet[]);
                     
                     
                     
        DECLARE eligibleEst INT 0;
                     
        DECLARE z,t INT 1 ; 
		DECLARE resultSetCount INT CARDINALITY(Environment.Variables.DB.ResultSet[]);
		DECLARE l INT 1 ;
		DECLARE p INT 1;  
		DECLARE EstabIds CHAR '' ;
		-- DECLARE allSizre INT LENGTH(EstabIds);
		-- check DB stored procedures and compare the value with userEstREf if equals store it in NoallDataMlsds array, else in allDataMlsds array 
		
		--    send all to DP 
		WHILE (z <= resultSetCount) DO 
			DECLARE db REFERENCE TO Environment.Variables.DB.ResultSet[z];
--			
--					DECLARE i INT 1; 
--				  	WHILE i <= codeLoop DO
--				  		DECLARE userEstRef REFERENCE TO Environment.Variabl.GetUserRs.UserEstablishmentsList.UserEstablishmentsItem[i];
--					  	
--					  	IF (db.LaborOfficeId = userEstRef.Establishment.LaborOfficeId
--					  		AND db.SequenceNumber = userEstRef.Establishment.SequenceNumber) THEN 
--				 
--						    SET Environment.Variabl.NoallDataMlsds.item[t].EstablishmentId = Environment.Variables.DB.ResultSet[z].EstablishmentId;
--						    SET t = t+1; 
--						    SET eligibleEst = 1;
--						    SET i = codeLoop;     
--					  	ELSE 
--					  		SET eligibleEst = 0;
--							
--					  	END IF;
--					   
--					  	SET i = i+1;
--				  	END WHILE ;	 
				  	-- estabs that dont exist in mlsd 
--				  	IF eligibleEst = 0 THEN 
--					  	SET Environment.Variabl.allDataMlsds.item[p].EstablishmentId = Environment.Variables.DB.ResultSet[z].EstablishmentId;
--				  	    SET p = p + 1;
--				  	END IF; 	
					-- IF eligibleEst = 0 THEN 
					  	--SET Environment.Variabl.allDataMlsds.item[p].EstablishmentId = Environment.Variables.DB.ResultSet[z].EstablishmentId;
--					  	SET Environment.Variabl.LaborOffice = Environment.Variables.DB.ResultSet[z].LaborOfficeId;
--					  	SET Environment.Variabl.SeqNo = Environment.Variables.DB.ResultSet[z].SequenceNumber;
--					  	SET Environment.Variabl.IsElig = Environment.Variables.DB.ResultSet[z].IsEligible;
--					  	SET Environment.Variabl.MlsdUSerType = Environment.Variables.DB.ResultSet[z].MLSDUserTypeId;
						--select EstabId  DB if its null select it fron MLSd 
						
		                IF Environment.Variables.DB.ResultSet[z].EstablishmentId IS NULL THEN 
		                	
		                	SET Environment.Varbs.missingEstabs[] = ( 
			                SELECT R.Establishment.EstablishmentId AS EstablishmentId        
			                FROM Environment.Variabl.GetUserRs.UserEstablishmentsList.UserEstablishmentsItem[] as R     
			                WHERE R.Establishment.SequenceNumber = db.SequenceNumber AND R.Establishment.LaborOfficeId = db.LaborOfficeId) ;            
              	          
		                	   
					  	    SET EstabIds = CAST ( EstabIds || ',' || CAST ( Environment.Varbs.missingEstabs.EstablishmentId AS CHAR) AS CHAR);
		                ELSE  
					  	   SET EstabIds = CAST ( EstabIds || ',' || CAST ( Environment.Variables.DB.ResultSet[z].EstablishmentId AS CHAR) AS CHAR);
		                	  
		                END IF;
--					  	 
				  	    --SET p = p + 1;
				  	-- END IF; 	

				     DELETE FIELD  Environment.Varbs ; 
		   SET z = z + 1; 	 
		END WHILE;  
	    SET Environment.Variabl.allDataMlsds = EstabIds; 
--	    DECLARE allSize INT CARDINALITY (Environment.Variabl.allDataMlsds.item[]);  
	    DECLARE allSize INT LENGTH(EstabIds);  
 
	    IF Environment.Variabl.ListAll = 1 AND resultSetCount = 0  THEN 
	       SET Environment.Variables.MWResponse.status = NoEstabs;
	       PROPAGATE TO TERMINAL 'out2'; 
           RETURN FALSE; 
	    END IF; 
	       	
	    --if the request is from the inbody and theres no data returned from database then user has no data 	       
        IF resultSetCount = 0 AND Environment.Variabl.ListAll = 0 THEN 
 	       SET Environment.Variables.MWResponse.status = NoEstabs;
        	PROPAGATE TO TERMINAL 'out2';
        	RETURN FALSE;  
        END IF;    
        
         
        
--        IF allSize = 0 AND Environment.Variabl.ListAll = 0 THEN 
-- 	       SET Environment.Variables.MWResponse.status = NoEstabs;
--        	PROPAGATE TO TERMINAL 'out2';
--        	RETURN FALSE;  
--        END IF;   
--        
                    
--                  
       	  
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	CREATE PROCEDURE Check(  IN IdNo CHARACTER,
				 		  	 IN ServiceId  INTEGER,
				 		  	 IN UserSubScribtion CHARACTER,
				 		  	 IN ListAll INT    
				 		  )    
				 		  
    LANGUAGE DATABASE DYNAMIC RESULT SETS 1 
    EXTERNAL NAME "dbo.Check_UserEstablishmentsEligibility";
	
END MODULE;


