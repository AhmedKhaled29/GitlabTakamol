



BROKER SCHEMA com.qiwa.esb.searchuserssubuninum
PATH Qiwa.Framework.Lib;


CREATE COMPUTE MODULE HTTP_SearchUsersSubUniNumFlow_DB_CALL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		SET Environment.Variables.Properties = InputRoot.Properties;	 
		SET Environment.Variables.MQMD = InputRoot.MQMD;
		SET Environment.Variables.MQRFH2 = InputRoot.MQRFH2;
		
		SET Environment.Variabl.XMLNSC = InputRoot.XMLNSC;  
		-- CALL CopyEntireMessage();
		-- creating the response structure "header and body"
--		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
--		CREATE FIRSTCHILD OF OutputRoot.XMLNSC.SearchUsersSubUniNumRs NAME 'Header';
--		CREATE LASTCHILD OF OutputRoot.XMLNSC.SearchUsersSubUniNumRs NAME 'Body';
--		-- creating refrences for the header and body of the response
--		DECLARE OutHeaderRef REFERENCE TO OutputRoot.XMLNSC.SearchUsersSubUniNumRs.Header;
		DECLARE InHeaderRef REFERENCE TO InputRoot.XMLNSC.SearchUsersSubUniNumRq.Header;
		DECLARE InbodyRef REFERENCE TO InputRoot.XMLNSC.SearchUsersSubUniNumRq.Body;
--		DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.SearchUsersSubUniNumRs.Body;
		--reference to propertY file
		IF EXISTS(Environment.Properties.SearchUsersSubUniNum.HTTP_INT_SearchUsersSubUniNumFlow[])
			THEN
			SET Environment.Properties.SearchUsersSubUniNum.HTTP_SearchUsersSubUniNumFlow=
			Environment.Properties.SearchUsersSubUniNum.HTTP_INT_SearchUsersSubUniNumFlow;
		END IF;
		DECLARE loadproperties REFERENCE TO Environment.Properties.SearchUsersSubUniNum.HTTP_SearchUsersSubUniNumFlow.Variables;
		-- CALL SP
		DECLARE TotalRecordsCount INTEGER;
		CALL Search_UserSubscriptionsUniNum ( CAST (InbodyRef.UnifiedNumberId AS INTEGER),
		CAST (InbodyRef.PageSize AS INTEGER),
		CAST (InbodyRef.PageIndex AS INTEGER),
		TotalRecordsCount,
		Environment.Variables.DB.ResultSet[]);
		DECLARE EstabIds CHAR '' ; 
		-- Mapping Response
		IF EXISTS (Environment.Variables.DB.ResultSet[]) THEN
			DECLARE x INTEGER 1 ;
			DECLARE ListCount INT CARDINALITY(Environment.Variables.DB.ResultSet[]);
			WHILE x <= ListCount DO
--				SET Environment.Var.UsersList.UserItem[x].IdNo = Environment.Variables.DB.ResultSet[x].IDNO;
--				SET Environment.Var.UsersList.UserItem[x].UserId = Environment.Variables.DB.ResultSet[x].UserID;
--				SET Environment.Var.UsersList.UserItem[x].Name = Environment.Variables.DB.ResultSet[x].Name;
				-- mapping subscription list from string xml to json array
				IF (Environment.Variables.DB.ResultSet[x].UserSubscriptions IS NOT NULL) THEN
					-- CREATE LASTCHILD OF Environment.Variables DOMAIN('XMLNSC') PARSE (CAST(Environment.Variables.DB.ResultSet[x].UserSubscriptions as character ),InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					CREATE LASTCHILD OF Environment.Variables DOMAIN('XMLNSC') PARSE (CAST(Environment.Variables.DB.ResultSet[x].UserSubscriptions as character ),546,1208);
					DECLARE SubscriptionsList INTEGER CARDINALITY(Environment.Variables.XMLNSC.UserSubscriptions.row[]);
					DECLARE z INTEGER 1;
					WHILE z <= SubscriptionsList DO
--							SET Environment.Var.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[z].LaborOfficeId = Environment.Variables.XMLNSC.UserSubscriptions.row[z].LaborOfficeId;
--							SET Environment.Var.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[z].SequenceNumber = Environment.Variables.XMLNSC.UserSubscriptions.row[z].SequenceNumber;
--							SET Environment.Var.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[z].StatusId = Environment.Variables.XMLNSC.UserSubscriptions.row[z].StatusId;
--							SET Environment.Var.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[z].Stus.StatusEn = Environment.Variables.XMLNSC.UserSubscriptions.row[z].StatusEn;
--							SET Environment.Var.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[z].StatusAr = Environment.Variables.XMLNSC.UserSubscriptions.row[z].StatusAr;
--							SET Environment.Var.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[z].StartDate = Environment.Variables.XMLNSC.UserSubscriptions.row[z].StartDate;
--							SET Environment.Var.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[z].ExpiredDate = Environment.Variables.XMLNSC.UserSubscriptions.row[z].ExpiredDate;
--							SET Environment.Var.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[z].Subscription = Environment.Variables.XMLNSC.UserSubscriptions.row[z].SubscriptionId;
--							SET Environment.Var.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[z].SubscriptionTypeEn = Environment.Variables.XMLNSC.UserSubscriptions.row[z].SubscriptionTypeEn;
--							SET Environment.Var.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[z].SubscriptionTypeAr = Environment.Variables.XMLNSC.UserSubscriptions.row[z].SubscriptionTypeAr;
--							SET Environment.Var.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[z].EstablishmentId = Environment.Variables.XMLNSC.UserSubscriptions.row[z].EstablishmentId;
							SET EstabIds = CAST ( EstabIds || ',' || CAST ( Environment.Variables.XMLNSC.UserSubscriptions.row[z].EstablishmentId AS CHAR) AS CHAR);
						set z =z +1; 
					END WHILE; 
				END IF;
				DELETE FIELD Environment.Variables.XMLNSC;
				-- DECLARE y INTEGER 1;
				-- DECLARE ListCount2 INT CARDINALITY (Environment.Variables.DB.ResultSet[]);
				-- WHILE y <= ListCount DO
				-- SET OutBodyRef.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[y].LaborOfficeId = Environment.Variables.DB.ResultSet[y].LaborOfficeId;
				-- SET OutBodyRef.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[y].SequenceNumber = Environment.Variables.DB.ResultSet[y].SequenceNumber;
				-- SET OutBodyRef.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[y].Status.StatusId = Environment.Variables.DB.ResultSet[y].StatusId;
				-- SET OutBodyRef.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[y].Status.StatusEn = Environment.Variables.DB.ResultSet[y].StatusEn;
				-- SET OutBodyRef.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[y].Status.StatusAr = Environment.Variables.DB.ResultSet[y].StatusAr;
				-- SET OutBodyRef.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[y].StartDate = Environment.Variables.DB.ResultSet[y].StartDate;
				-- SET OutBodyRef.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[y].ExpiredDate = Environment.Variables.DB.ResultSet[y].ExpiredDate;
				-- SET OutBodyRef.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[y].Subscription.Subscription = Environment.Variables.DB.ResultSet[y].SubscriptionId;
				-- SET OutBodyRef.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[y].Subscription.SubscriptionTypeEn = Environment.Variables.DB.ResultSet[y].SubscriptionTypeEn;
				-- SET OutBodyRef.UsersList.UserItem[x].SubscriptionsList.SubscriptionsItem[y].Subscription.SubscriptionTypeAr = Environment.Variables.DB.ResultSet[y].SubscriptionTypeAr;
				-- SET y = y + 1;
				-- END WHILE;
				SET x = x + 1;
			END WHILE;
			DELETE FIELD Environment.Variables.XMLNSC;
			SET OutputRoot.XMLNSC.data.EstablishmentIds = TRIM(',' FROM EstabIds); 
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL = loadproperties.RequestURL;      
			
			
			SET Environment.var.TotalRecordsCount = TotalRecordsCount;  
			--CALL Create_esbXML_Response_Header(GetESBSuccessCode(),InHeaderRef,OutHeaderRef);
		ELSE
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			CREATE FIRSTCHILD OF OutputRoot.XMLNSC.SearchUsersSubUniNumRs NAME 'Header';
			CREATE LASTCHILD OF OutputRoot.XMLNSC.SearchUsersSubUniNumRs NAME 'Body';
			-- creating refrences for the header and body of the response
			DECLARE OutHeaderRef REFERENCE TO OutputRoot.XMLNSC.SearchUsersSubUniNumRs.Header;
			DECLARE OutBodyRef REFERENCE TO OutputRoot.XMLNSC.SearchUsersSubUniNumRs.Body;
			
			CALL Create_esbXML_Response_Header(loadproperties.UserSubNotFound,InHeaderRef,OutHeaderRef);
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	-- create Get_EmpProfile procedure
	CREATE PROCEDURE Search_UserSubscriptionsUniNum( IN UnifiedNumberId INTEGER,
	IN PageSize INTEGER,
	IN PageIndex INTEGER,
	INOUT TotalRecordsCount INTEGER )

	LANGUAGE DATABASE DYNAMIC RESULT SETS 1
	EXTERNAL NAME "dbo.Search_UserSubscriptionsUniNum";

END MODULE;